const withPlugins = require('next-compose-plugins')
const withFonts = require('next-fonts')
const CompressionPlugin = require('compression-webpack-plugin')

const nextConfig = {
  webpack: (config, { dev }) => {
    const withImages = () => {
      const svgrLoaderConfig = {
        loader: '@svgr/webpack',
        options: {
          svgoConfig: {
            plugins: [
              { inlineStyles: false },
              { prefixIds: false },
              {
                cleanupNumericValues: {
                  floatPrecision: 3,
                },
              },
            ],
          },
        },
      }

      const svgrLoaderConfigWithOutSvgo = {
        ...svgrLoaderConfig,
        options: {
          ...svgrLoaderConfig.options,
          svgo: false,
        },
      }

      const fileLoaderConfig = {
        loader: 'file-loader',
        options: {
          publicPath: '/_next',
          name: '[path][name]-[hash:8].[ext]',
        },
      }

      config.module.rules.push(
        {
          test: /\.(jpe?g|png|gif|webp|ico)$/,
          use: [fileLoaderConfig],
        },
        {
          test: /\.svg$/,
          oneOf: [
            {
              resourceQuery: /original/,
              use: [svgrLoaderConfigWithOutSvgo, fileLoaderConfig],
            },
            {
              use: [svgrLoaderConfig, fileLoaderConfig],
            },
          ],
        },
      )
    }

    const withCompression = () => {
      if (!dev) {
        config.plugins.push(
          new CompressionPlugin({
            test: /\.js$|\.css$|\.html$/,
            threshold: 10240,
          }),
          new CompressionPlugin({
            test: /\.js$|\.css$|\.html$/,
            algorithm: 'brotliCompress',
            filename: '[path].br[query]',
            compressionOptions: { level: 11 },
            threshold: 10240,
          }),
        )
      }
    }

    withImages()
    withCompression()

    return config
  },
}

module.exports = withPlugins([withFonts], nextConfig)
