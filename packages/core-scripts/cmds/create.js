const path = require('path')
const spawn = require('cross-spawn')
const fs = require('fs-extra')
const { compile } = require('handlebars')
const inquirer = require('inquirer')

const { pick, getRepoNameByAddress, validateRepoAddress } = require('../utils')

async function handler(argv) {
  const cwd = process.cwd()
  const absoluteOutputPath = path.resolve(cwd, argv.dir)
  const basename = path.basename(absoluteOutputPath)

  const answers = await inquirer.prompt([
    {
      type: 'input',
      name: 'name',
      default: basename,
      message: '–ö–∞–∫ –Ω–∞–∑–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é?',
    },
    {
      type: 'confirm',
      name: 'initRepo',
      message: '–ü–æ–¥–∫–ª—é—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π?',
    },
    {
      type: 'input',
      name: 'repoAddress',
      message: '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (ssh):',
      when: ({ initRepo }) => initRepo,
      validate: value => {
        const errorMessage = [
          '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –∞–¥—Ä–µ—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:',
          'git@github.com:palmflip/example-nextjs-sample.git'
        ].join('\n')

        return validateRepoAddress(value) || errorMessage
      },
    },
  ])

  const FILES_TO_CREATE = [
    {
      path: './package.json',
      locals: ['name'],
    },
    {
      path: './next.config.js',
      locals: ['name', 'repoName'],
    },
    answers.initRepo && {
      path: './scripts/deploy.sh',
      mode: 0777 & ~process.umask(),
      locals: ['repoAddress'],
    },
    answers.initRepo && './.gitignore',
    './babel.config.js',
    './next.config.js',
    './pages/index.jsx',
    './pages/_app.jsx',
  ].filter(Boolean)

  const context = {
    name: answers.name,
  }

  if (answers.initRepo) {
    context.repoAddress = answers.repoAddress
    context.repoName = getRepoNameByAddress(answers.repoAddress)
  }

  for (const fileToCreate of FILES_TO_CREATE) {
    const targetFilePathPart = typeof fileToCreate === 'object' ? fileToCreate.path : fileToCreate
    const absTargetPath = path.resolve(absoluteOutputPath, targetFilePathPart)
    const templatePath = path.resolve(__dirname, '../templates', `${targetFilePathPart}.hbs`)

    const template = compile(fs.readFileSync(templatePath, { encoding: 'utf8' }))

    const renderedTemplate =
      typeof fileToCreate === 'object'
        ? template(pick(context, ...fileToCreate.locals))
        : template()

    const writeOptions = { encoding: 'utf8' }

    if (fileToCreate.mode) {
      writeOptions.mode = fileToCreate.mode
    }

    fs.outputFileSync(absTargetPath, renderedTemplate, writeOptions)
  }

  console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...')

  const installProcess = spawn.sync('npm', ['install'], {
    stdio: 'inherit',
    cwd: absoluteOutputPath,
  })

  if (installProcess.status !== 0) {
    process.exit(installProcess.status)
  }

  if (answers.initRepo) {
    spawn.sync('git', ['init'], {
      stdio: 'inherit',
      cwd: absoluteOutputPath,
    })

    spawn.sync('git', ['remote', 'add', 'origin', answers.repoAddress], {
      stdio: 'inherit',
      cwd: absoluteOutputPath,
    })
  }

  console.log('\n-----------------------')
  console.log('üç∫ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
  console.log('-----------------------')
  console.log('–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å dev-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:\n')
  console.log(`$ cd ${basename}`)
  console.log(`$ npm run dev\n`)
  console.log(
    '–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Å–µ—Ä–≤–µ—Ä –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ —ç—Ç—É —Å—Ç–∞–Ω–∏—Ü—É: http://localhost:3000'
  )
  console.log('-----------------------')
}

exports.command = 'create [dir]'

exports.desc = '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∏—Å—Ç—ã–π –ø—Ä–æ–µ–∫—Ç'

exports.builder = {
  dir: {
    default: '.',
  },
}

exports.handler = handler
